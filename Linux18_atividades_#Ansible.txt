#Challenge 1

1.Create 4 Linux VMs. One will be the Ansible control node and the other 3 the managed nodes.
  Check that the control node can access the managed nodes using SSH.
  Install Ansible on the control machine.
  Create an inventory file that contains the managed nodes and gather them in a group called servers.
  Test Ansible SSH authentication using the ansible command and the ping module.

	[server]
	vps1 ansible_host="ssh ec2-user@ec2-52-90-174-159.compute-1.amazonaws.com"
	vps2 ansible_host="ssh ec2-user@ec2-54-91-112-107.compute-1.amazonaws.com"

2.Consider the inventory file from the previous lecture.
 Add behavioral inventory parameters for the username, password, and SSH port.
 Run the ansible command without -u user -k to check that it uses the parameters from the inventory file.

	[server:vars]
	ansible_user=ec2-user
	ansible_port=22

#Challenge 2

1.Consider the inventory file from the previous challenge.
  Using the Ansible shell module and a Linux command, display the IP address of the default gateway of each managednode.
	- ansible -i ./host server -m shell -a "ip address"

2.Change the solution so that it redirects to a file the IP address (and ONLY the IP) of the default gateway of each managed node.
	- ansible -i ./hosts server -m shell -a "ip route show default" | grep -v ">>" | cut -d " " -f 3 >> default_getway.txt


#Challenge 3

1.Using the Ansible shell module and a Linux command, display the CPU on each managed node.
	- ansible -i ./hosts server -m shell -a "lscpu"


#Challenge 4

1.Using the Ansible shell module, create on each managed node a new user called toor that belongs to the sudo group. Run the command that creates the user as root.
	- ansible -i ./hosts server -m user -a "name=luffy state=present groups=adm create_home=yes comment=\"new use for teste\" shell=/bin/bash" --become

2.Display the last created user on each managed node.
	- ansible -i ./hosts server -m shell -a "tail -n 3 /etc/passwd" --become



#Challenge 5

1.On Ansible control node, create a shell script that synchronizes (mirrors) the /etc directory to /root/etc-backup
  Using Ansible and the script module, run the script on each managed node.
	-#!/bin/bash
         tar -czf /root/etc-$(date +%F).tar.gz /etc
	 
	- ansible -i /.hosts server -m script -a "./backup" --become


#Challenge 6

1.Using Ansible and the apt module, install the nginx web server on each managed node.
	- ansible -i hosts server -m apt -a "name=nginx state=present update_cache=true" --become
	- ansible -i hosts server -m dnf -a "name=nginx state=present update_cache=true" --become       'on RedHat'


#Challenge 7

1.Using Ansible and the apt module, upgrade all packages to their latest versions on each managed node
	- ansible -i hosts server -m dnf -a "name=* state=latest update_cache=true" --become             'on RedHat'
	- ansible -i hosts server -m apt -a "name=nginx state=present update_cache=true" --become

#Challenge 8

1.Using Ansible and the service module, restart SSH on all managed nodes.
	- ansible -i hosts server -m service -a "name=sshd state=restarted" --become                     'on Redhat'
	- ansible -i hosts server -m service -a "name=ssh state=restarted" --become


#Challenge 9

1.Using Ansible and the service module, set nginx to start on boot on all nodes.
	- ansible -i hosts server -m service -a "name=nginx state=enabled" --become


#Challenge 10

1.Using Ansible and the group module, create a group called managers on all nodes.
	- - ansible -i ./hosts server -m group -a "name=developers state=present" --become

2.Using Ansible and the user module, create a user called toor on all nodes.
  Add the user to the sudo and managers groups.
 	- ansible -i ./hosts server -m user -a "name=thor state=present groups=adm,managers create_home=yes shell=/bin/bash" --become















