#Challenge 1

1. Create a script that takes an argument and tests if it's a file or not.
	- vim scrpt_1.sh
		#!/bin/bash
		if [[ -f "$1" ]]
		then	
			echo "The argument is a regular file."
		else
			echo "The argument is not a regular file."
		fi

#Challenge 2


1.Consider the solution from the previous challenge. Change it so that it tests if the script is run with exactly one argument.

	- #!/bin/bash
	  if [[ $# -eq 1 ]]
	  then
		if [[ -f "$1" ]]
		then	
			echo "The argument is a regular file."
		else
			echo "The argument is not a regular file."
		fi
	  else
		echo "The script was run with $# arguments. You should run it with exactly one argument."
	  fi

#Challenge 3

1.Create a script that clears the contents of a text file which is the scriptâ€™s argument.
  Test that the argument is a file.

	- vim scrip_3.sh
		#!/bin/bash
		if [[ -f $1 ]]
		then
		echo "" > $1 
    		# cat /dev/null > $1
			echo "$1 contents was cleared!"
		else
			echo "The script's argument should be a file!"
		fi



#Challenge 4

1.Create a script that drops the packets from an IP address given by the user.
  Example: The command to drop the packets from 100.0.0.1 is: iptables -I INPUT -s 100.0.0.1 -j DROP
  Run the script as root and test the connection to different IP addresses.
	
	- vim script_4.sh
		#!/bin/bash
		read -p "IP address to drop: " ip
		iptables -I INPUT -s $ip -j DROP
		echo "All packets from $ip will be dropped."

#Challenge 5

1.Change the solution from the previous challenge so that the IP address is given as the first argument of the script. 
  Test that the script is run with exactly one argument.


	#!/bin/bash
	read -p "Enter with a IP: " ip
	if [[ $ip =~ [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
	then
		sudo iptables -I INPUT -s $ip -j DROP
		echo "Dropping packets from $ip"
	else
		echo "Ente just with one IP."



#Challenge 6

1.Develop a script that appends to a file the currently logged-in users and the current date and time.

	- #!/bin/bash

	  users="`who | cut -f1 -d" "`"
	  date_time="`date +%F\ %H:%M`"   #\ to escape the whitespace

	  echo $date_time >> logged_users.txt
	  echo "-------------------------" >> logged_users.txt
	  echo $users >> logged_users.txt
	  echo >> logged_users.txt 

#Challenge 7

1.Create a script that prompts the user for a character.
  If the character is Y, display "YES". If the character is N, display 
  "NO". Use double quotes when displaying YES and NO.  If the user enters any other character exit the script.

	- while true; do
		read -p "Choose Y or N: " rep
		while true; do
			if [[ $rep == "Y" ]]
			then
				echo "Y is YES"
				break 2
			elif [[ $rep == "N" ]]
			then
				echo "N is No"
				break 2
			else
				"Enter with Y or N"
				break 1
			fi
	done
done


#Challenge 8

1.Create a script that takes exactly two arguments. The first argument is a shell command and the second argument is a string.
 The script will check if the string belongs to the output of the command.
 Example: ./search_in_output.sh "ifconfig -a" "flags" will say if the string flags belongs to the output of ifconfig -a

	- #!/bin/bash
	  if [[ $# -ne 2 ]]
	  then
	  	echo "Run the script with exactly two arguments."
	  	exit
	  else
	  	output="`$1`"
	  	if [[ "$output" == *"$2"* ]]
	  	then
			echo "$2 belongs to the output of $1"
	  	else
			echo "$2 DOES NOT belongs to the output of $1"
	  	fi
	  fi





